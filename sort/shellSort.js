// 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。
// 希尔排序是基于插入排序的以下两点性质而提出改进方法的：
//     插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；
//     但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；
// 希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，
// 待整个序列中的记录"基本有序"时，再对全体记录进行依次直接插入排序。
// 那么还是思考一下，想要完成希尔排序，拢共分几步？
// 第一步
// 将数组长度/2，得到需要将数组分成的组数
// 第二步
// 将每一组的数分别按插入排序
// 第三步，重复前两步
// 将组数再/2，之后每组再插入排序
// 第四步
// 结束符号，直到组数等于一，也就是单组长度等于数组长度时，再插入一次，排序结束
// function shellSort(arr) {
//   let len = arr.length;
//   // 第一步
//   let gap = Math.floor(len / 2);
//   // 第二步
//   for (let i = gap; i < len; i++) {
//     let temp = arr[i];
//     // 每一次向前查询的数的步长为分组长度
//     for (let j = i - gap; j >= 0; j -= gap) {
//       if (arr[j - gap] > arr[index]) {
//         arr[j + gap] = arr[j]
//       }
//       arr[j + gap] = temp
//     }
//   }

//   console.log(arr);
// }

// let arr = [5, 3, 6, 2, 1, 7, 9, 4];
// shellSort(arr)